{"version":3,"sources":["redux.js","worker/WorkerItem.js","worker/WorkerList.js","components/Worker.js","components/Alert.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","workers","payload","filter","worker","id","activeWorkerId","map","workerId","active","name","post","birthday","day","sex","fired","message","value","postNames","toggleActiveWorker","WorkerItem","index","onActive","classes","push","onClick","className","join","scope","WorkerList","key","connect","props","length","Alert","role","addWorkerAction","removeWorkerAction","changeNameAction","changePostAction","changeBirthdayAction","changeSexAction","changeFiresAction","changeAlertAction","useState","setName","setPost","Date","setBirthday","setSex","checked","setFired","valueSexWorker","defaultFrom","handleChangeSex","e","target","position","indexOf","bind","disabled","form","onSubmit","preventDefault","trim","job","postName","mounth","getMonth","getDate","getFullYear","console","log","placeholder","nameWorker","valueNameWorker","onChange","postWorker","valuePostWorker","positionPost","dateFormat","selected","dayWorker","valueBirthdayWorker","maxDate","htmlFor","valueFiredWorker","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2302a15b.chunk.js","sourcesContent":["import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n    workers: [\r\n        {id: 1, name: \"Мария\", post: {name: \"Директор\", value: \"director\"}, birthday: \"20.02.97\", sex: \"female\", fired: false, active: false, day: 0},\r\n        {id: 2, name: \"Сергей\", post: {name: \"Менеджер\", value: \"manager\"}, birthday: \"20.02.97\", sex: \"male\", fired: false, active: false, day: 0},\r\n        {id: 3, name: \"Лариса\", post: {name: \"Продавец\", value: \"seller\"}, birthday: \"20.02.97\", sex: \"female\", fired: true, active: false, day: 0}\r\n    ],\r\n    activeWorkerId: false,\r\n    postNames: [\r\n        {name: \"Выбрать должность\", value: \"none\"},\r\n        {name: \"Директор\", value: \"director\"},\r\n        {name: \"Менеджер\", value: \"manager\"},\r\n        {name: \"Продавец\", value: \"seller\"},\r\n        {name: \"Уборщик\", value: \"cleaner\"}\r\n    ],\r\n    message: false\r\n}\r\n\r\nexport const store = createStore(\r\n    reducer,\r\n    initialState\r\n);\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ADD_WORKER':\r\n            return {\r\n                ...state,\r\n                workers: [...state.workers, action.payload]\r\n            };\r\n        case 'REMOVE_WORKER':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.filter((worker) => worker.id !== action.payload),\r\n                activeWorkerId: false\r\n            };\r\n        case 'TOGGLE_WORKER':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, active: !worker.active }\r\n                        : { ...worker, active: false }\r\n                ),\r\n                activeWorkerId: action.payload.activeWorkerId\r\n            };\r\n        case 'CHANGE_WORKER_NAME':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, name: action.payload.name}\r\n                        : { ...worker }\r\n                ),\r\n            };\r\n        case 'CHANGE_WORKER_POST':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, post: action.payload.post}\r\n                        : { ...worker }\r\n                ),\r\n            };\r\n        case 'CHANGE_WORKER_BIRTHDAY':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, birthday: action.payload.birthday, day: action.payload.day}\r\n                        : { ...worker }\r\n                ),\r\n            };\r\n        case 'CHANGE_WORKER_SEX':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, sex: action.payload.sex}\r\n                        : { ...worker }\r\n                ),\r\n            };\r\n        case 'CHANGE_WORKER_FIRED':\r\n            return {\r\n                ...state,\r\n                workers: state.workers.map((worker) =>\r\n                    worker.id === action.payload.workerId\r\n                        ? { ...worker, fired: action.payload.fired}\r\n                        : { ...worker }\r\n                ),\r\n            };\r\n        case 'CHANGE_ALERT':\r\n            return {\r\n                ...state,\r\n                message: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const addWorkerAction = (worker) => ({\r\n    type: 'ADD_WORKER',\r\n    payload: worker\r\n});\r\n\r\nexport const removeWorkerAction = (workerId) => ({\r\n    type: 'REMOVE_WORKER',\r\n    payload: workerId\r\n});\r\n\r\nexport const toggleActiveWorker = (workerId, activeWorkerId) => ({\r\n    type: 'TOGGLE_WORKER',\r\n    payload: {\r\n        workerId,\r\n        activeWorkerId\r\n    }\r\n});\r\n\r\nexport const changeNameAction = (workerId, name) => ({\r\n    type: 'CHANGE_WORKER_NAME',\r\n    payload: {\r\n        workerId,\r\n        name\r\n    }\r\n});\r\n\r\nexport const changePostAction = (workerId, post) => ({\r\n    type: 'CHANGE_WORKER_POST',\r\n    payload: {\r\n        workerId,\r\n        post\r\n    }\r\n});\r\n\r\nexport const changeBirthdayAction = (workerId, birthday, day) => ({\r\n    type: 'CHANGE_WORKER_BIRTHDAY',\r\n    payload: {\r\n        workerId,\r\n        birthday,\r\n        day\r\n    }\r\n});\r\n\r\nexport const changeSexAction = (workerId, sex) => ({\r\n    type: 'CHANGE_WORKER_SEX',\r\n    payload: {\r\n        workerId,\r\n        sex\r\n    }\r\n});\r\n\r\nexport const changeFiresAction = (workerId, fired) => ({\r\n    type: 'CHANGE_WORKER_FIRED',\r\n    payload: {\r\n        workerId,\r\n        fired\r\n    }\r\n});\r\n\r\nexport const changeAlertAction = (value) => ({\r\n    type: 'CHANGE_ALERT',\r\n    payload: value\r\n});\r\n","import React from \"react\";\r\n\r\nexport default function WorkerItem({worker, index, onActive}) {\r\n    const classes = []\r\n\r\n    if (worker.active) {\r\n        classes.push('active')\r\n    }\r\n\r\n    return (\r\n        <tr\r\n            onClick={() => onActive(worker.id)}\r\n            className={classes.join(' ')}\r\n        >\r\n            <th scope=\"row\">{index + 1}</th>\r\n\r\n            <th>{worker.name}</th>\r\n\r\n            <td>{worker.post.name}</td>\r\n\r\n            {worker.sex === \"male\" ? (\r\n                <td>Мужской</td>\r\n            ) : (\r\n                <td>Женский</td>\r\n            )}\r\n\r\n            <td>{worker.birthday}</td>\r\n\r\n            {worker.fired ? (\r\n                <td>Уволен</td>\r\n            ) : (\r\n                <td>Не уволен</td>\r\n            )}\r\n        </tr>\r\n    )\r\n}","import React from \"react\";\r\nimport WorkerItem from \"./WorkerItem\";\r\n\r\nexport default function WorkerList({workers, onActive}) {\r\n    return (\r\n        <table className=\"table table-hover\">\r\n            <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">ФИО</th>\r\n                <th scope=\"col\">Должность</th>\r\n                <th scope=\"col\">Пол</th>\r\n                <th scope=\"col\">Дата рождения</th>\r\n                <th scope=\"col\">Уволен</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {workers.map((worker, index) => {\r\n                    return <WorkerItem\r\n                        worker={worker}\r\n                        key={worker.id}\r\n                        index={index}\r\n                        onActive={onActive}\r\n                    />\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { toggleActiveWorker } from '../redux';\r\n\r\nimport WorkerList from \"../worker/WorkerList\";\r\n\r\nconst Worker = (props) => {\r\n    const {workers} = props;\r\n    const {activeWorkerId} = props;\r\n\r\n    function activeWorker(workerId) {\r\n        if (activeWorkerId !== workerId) {\r\n            props.toggleActiveWorker(workerId, workerId)\r\n        } else {\r\n            props.toggleActiveWorker(workerId, false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-7\">\r\n            {workers.length ? (\r\n                <WorkerList workers={workers} onActive={activeWorker} />\r\n            ) : (\r\n                <div>Записей нет</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workers: state.workers,\r\n    activeWorkerId: state.activeWorkerId\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { toggleActiveWorker }\r\n)(Worker);\r\n","import React from 'react';\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        <div className=\"col-12 p-3\">\r\n            <div className=\"alert alert-warning\" role=\"alert\">\r\n                Введите ФИО и выберите должность\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    addWorkerAction,\r\n    removeWorkerAction,\r\n    toggleActiveWorker,\r\n    changeNameAction,\r\n    changePostAction,\r\n    changeBirthdayAction,\r\n    changeSexAction,\r\n    changeFiresAction,\r\n    changeAlertAction\r\n} from '../redux';\r\n\r\nimport Alert from \"./Alert\";\r\n\r\nconst Form = (props) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [post, setPost] = useState(\"none\");\r\n    const [birthday, setBirthday] = useState(new Date());\r\n    const [sex, setSex] = useState({value: \"male\"});\r\n    const [fired, setFired] = useState({checked: false});\r\n\r\n    const {workers} = props;\r\n    const {activeWorkerId} = props;\r\n    const {postNames} = props;\r\n    const {message} = props;\r\n\r\n    const valueNameWorker = (workerId) => {\r\n        let nameWorker = ''\r\n        workers.map((worker) => {\r\n            if (worker.id === workerId) {\r\n                nameWorker = worker.name\r\n            }\r\n        })\r\n        return nameWorker\r\n    }\r\n\r\n    const valuePostWorker = (workerId) => {\r\n        let postWorker = ''\r\n        workers.map((worker) => {\r\n            if (worker.id === workerId) {\r\n                postWorker = worker.post\r\n            }\r\n        })\r\n        return postWorker.value\r\n    }\r\n\r\n    const valueBirthdayWorker = (workerId) => {\r\n        let dayWorker = ''\r\n        workers.map((worker) => {\r\n            if (worker.id === workerId) {\r\n                dayWorker = worker.day\r\n            }\r\n        })\r\n        return dayWorker\r\n    }\r\n\r\n    const valueSexWorker = (workerId) => {\r\n        let sex = ''\r\n        workers.map((worker) => {\r\n            if (worker.id === workerId) {\r\n                sex = worker.sex\r\n            }\r\n        })\r\n        return sex\r\n    }\r\n\r\n    const valueFiredWorker = (workerId) => {\r\n        let fired = ''\r\n        workers.map((worker) => {\r\n            if (worker.id === workerId) {\r\n                fired = worker.fired\r\n            }\r\n        })\r\n        return fired\r\n    }\r\n\r\n    const defaultFrom = () => {\r\n        setName(\"\");\r\n        setPost(\"none\");\r\n        setBirthday(new Date());\r\n        setSex({value: \"male\"});\r\n        setFired({checked: false});\r\n    }\r\n\r\n    const removeWorker = (workerId) => {\r\n        props.removeWorkerAction(workerId)\r\n        defaultFrom()\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        if (name.trim() && post !== \"none\") {\r\n            const id = new Date()\r\n            let job = postNames[0];\r\n            postNames.map(postName => {\r\n                if (postName.value === post) {\r\n                    job = postName\r\n                }\r\n            });\r\n\r\n            let mounth = birthday.getMonth();\r\n            mounth < 9\r\n                ? mounth = '0' + (mounth + 1)\r\n                : mounth = mounth + 1\r\n            let day = birthday.getDate() + '.' + mounth + '.' + birthday.getFullYear();\r\n\r\n            props.addWorkerAction({\r\n                id: id,\r\n                name: name,\r\n                post: job,\r\n                birthday: day,\r\n                sex: sex.value,\r\n                fired: fired.checked,\r\n                active: false,\r\n                day: birthday\r\n            })\r\n            defaultFrom()\r\n            props.toggleActiveWorker(id, id)\r\n            props.changeAlertAction(false)\r\n        } else {\r\n            console.log(\"Введите имя и выберите должность\")\r\n            props.changeAlertAction(true)\r\n        }\r\n    };\r\n\r\n    const handleChangeName = e => {\r\n        setName(e.target.value)\r\n        if(activeWorkerId) {\r\n            let position = workers.map(\r\n                function(worker) {\r\n                    return worker.id;\r\n                }).indexOf(activeWorkerId);\r\n            props.changeNameAction(workers[position].id, e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleChangePost = e => {\r\n        setPost(e.target.value)\r\n        if(activeWorkerId) {\r\n            let position = workers.map(\r\n                function(worker) {\r\n                    return worker.id;\r\n                }).indexOf(activeWorkerId);\r\n            let positionPost = postNames.map(\r\n                function(post) {\r\n                    return post.value;\r\n                }).indexOf(e.target.value);\r\n            props.changePostAction(workers[position].id, postNames[positionPost])\r\n        }\r\n    }\r\n\r\n    const handleChangeBirthday = e => {\r\n        let day = e;\r\n        setBirthday(day)\r\n        if(activeWorkerId) {\r\n            let position = workers.map(\r\n                function(worker) {\r\n                    return worker.id;\r\n                }).indexOf(activeWorkerId);\r\n\r\n            let mounth = day.getMonth();\r\n            mounth < 9\r\n                ? mounth = '0' + (mounth + 1)\r\n                : mounth = mounth + 1\r\n            let birthday = day.getDate() + '.' + mounth + '.' + day.getFullYear();\r\n            props.changeBirthdayAction(workers[position].id, birthday, day)\r\n        }\r\n    }\r\n\r\n    const handleChangeSex = e => {\r\n        setSex({value: e.target.value})\r\n        if(activeWorkerId) {\r\n            let position = workers.map(\r\n                function(worker) {\r\n                    return worker.id;\r\n                }).indexOf(activeWorkerId);\r\n            props.changeSexAction(workers[position].id, e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleChangeFired = e => {\r\n        setFired({checked: !fired.checked})\r\n        if(activeWorkerId) {\r\n            let position = workers.map(\r\n                function(worker) {\r\n                    return worker.id;\r\n                }).indexOf(activeWorkerId);\r\n            props.changeFiresAction(workers[position].id, !fired.checked)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-5\">\r\n            <div className=\"row border border-secondary\">\r\n                <div className=\"col-12 text-right bg-light p-3\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"\r\n                        onClick={removeWorker.bind(null, activeWorkerId)}\r\n                        disabled={!activeWorkerId}\r\n                    >\r\n                        Удалить\r\n                    </button>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-success\"\r\n                        form=\"addWorker\"\r\n                        disabled={activeWorkerId}\r\n                    >\r\n                        Добавить\r\n                    </button>\r\n                </div>\r\n\r\n                {message ? (\r\n                    <Alert />\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n\r\n                <div className=\"col-12 p-3\">\r\n                    <form onSubmit={submitHandler} id=\"addWorker\">\r\n                        <div className=\"form-group\">\r\n                            <label>ФИО</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"ФИО\"\r\n                                value={activeWorkerId ? valueNameWorker(activeWorkerId) : name}\r\n                                onChange={handleChangeName}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Должность</label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                value={activeWorkerId ? valuePostWorker(activeWorkerId) : post}\r\n                                onChange={handleChangePost}\r\n                            >\r\n                                {postNames.map(postName => (\r\n                                    <option value={postName.value} key={postName.value}>{postName.name}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Дата рождения</label>\r\n                            <br/>\r\n                            <DatePicker\r\n                                dateFormat=\"dd.MM.yyyy\"\r\n                                selected={activeWorkerId ? valueBirthdayWorker(activeWorkerId) : birthday}\r\n                                maxDate={new Date()}\r\n                                onChange={handleChangeBirthday}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Пол</label>\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    id=\"male\"\r\n                                    className=\"form-check-input\"\r\n                                    name=\"sex\"\r\n                                    type=\"radio\"\r\n                                    value=\"male\"\r\n                                    checked={\"male\" === (activeWorkerId ? valueSexWorker(activeWorkerId) : sex.value)}\r\n                                    onChange={handleChangeSex}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"male\">\r\n                                    Мужской\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    id=\"female\"\r\n                                    className=\"form-check-input\"\r\n                                    name=\"sex\"\r\n                                    type=\"radio\"\r\n                                    value=\"female\"\r\n                                    checked={\"female\" === (activeWorkerId ? valueSexWorker(activeWorkerId) : sex.value)}\r\n                                    onChange={handleChangeSex}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"female\">\r\n                                    Женский\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-check\">\r\n                            <input\r\n                                id=\"fired\"\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                checked={activeWorkerId ? valueFiredWorker(activeWorkerId) : fired.checked}\r\n                                onChange={handleChangeFired}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"fired\">Уволен</label>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    workers: state.workers,\r\n    activeWorkerId: state.activeWorkerId,\r\n    postNames: state.postNames,\r\n    message: state.message\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        addWorkerAction,\r\n        removeWorkerAction,\r\n        toggleActiveWorker,\r\n        changeNameAction,\r\n        changePostAction,\r\n        changeBirthdayAction,\r\n        changeSexAction,\r\n        changeFiresAction,\r\n        changeAlertAction\r\n    }\r\n)(Form);\r\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {store} from './redux';\nimport Worker from \"./components/Worker\";\nimport Form from \"./components/Form\";\n\nconst App = () => (\n    <Provider store={store}>\n        <div className=\"row\">\n            <Worker />\n            <Form />\n        </div>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}